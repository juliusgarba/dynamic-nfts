{"version":3,"sources":["utils/helperFunctions.js","components/navbar/Navbar.jsx","components/nfts/Nfts.jsx","hooks/useSuperContract.js","hooks/useContract.js","pages/Home/Home.jsx","assets/like_emoji.png","assets/happy_emoji.webp","assets/angry_emoji.jpg","pages/Token/Token.jsx","pages/Mint/Mint.jsx","App.js","index.js"],"names":["truncateAddress","address","slice","length","Navbar","useContractKit","destroy","connect","className","to","onClick","href","type","Nfts","nfts","title","loading","GridLoader","size","map","nft","id","src","image","alt","name","useSuperContract","abi","contractAddress","getConnectedKit","useState","contract","setContract","getContract","useCallback","kit","web3","eth","Contract","useEffect","useContract","SuperToken","SuperTokens","Home","characters","setCharacters","setLoading","superContract","getCharacters","getMetadata","ipfsUrl","fetch","raw_data","json","meta","console","log","e","_characters","methods","totalSupply","call","total","i","_character","Promise","resolve","getToken","c","_tokenURI","tokenData","owner","likesCount","happyCount","angryCount","description","push","Number","all","_chars","Token","character","setCharacter","content","setContent","useParams","performActions","getCharacter","_c","getComment","_comments","token_data","token_meta","charObj","likeCount","comments","sendReaction","reactionId","defaultAccount","addReaction","send","from","sendComment","addComment","likeIcon","happyIcon","angryIcon","value","onChange","target","sender","Mint","setName","setDescription","setImage","navigate","useNavigate","handleMintButton","mintNft","client","Web3Storage","token","process","formattedName","trim_name","trim","includes","replaceAll","makeFileObjects","file","blob","Blob","JSON","stringify","File","uploadToIPFS","file_name","image_name","put","image_cid","image_url","data","files","file_cid","URI","mintCharacter","transaction","image_file","imageUrl","alert","disabled","App","path","element","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","url","document","getElementById"],"mappings":"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","file":"static/js/main.fcb2b7bc.chunk.js","sourcesContent":["import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { truncateAddress } from \"../../utils/helperFunctions\";\nimport \"./Navbar.css\";\n\nconst Navbar = () => {\n  const { address, destroy, connect } = useContractKit();\n\n  return (\n    <div className=\"navbar\">\n      <div className=\"navbar-links\">\n        <div className=\"navbar-links_logo\">\n          <Link to=\"/\">\n            <h1>SuperTokens</h1>\n          </Link>\n        </div>\n        <div className=\"navbar-links_container\">\n          {address && (\n            <Link to=\"/\">\n              <p onClick={destroy}>Disconnect</p>\n            </Link>\n          )}\n          {!address ? (\n            <>\n              <button type=\"button\" className=\"secondary-btn\" onClick={connect}>\n                Connect\n              </button>\n            </>\n          ) : (\n            <>\n              <a\n                href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\n              >\n                <button type=\"button\" className=\"secondary-btn\">\n                  {truncateAddress(address)}\n                </button>\n              </a>\n              <Link to=\"/create\">\n                <button type=\"button\" className=\"primary-btn\">\n                  Mint Character\n                </button>\n              </Link>\n            </>\n          )}\n        </div>\n      </div>\n\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./nfts.css\";\nimport { Link } from \"react-router-dom\";\nimport { GridLoader } from \"react-spinners\";\n\nconst Nfts = ({ nfts, title, loading }) => {\n  return (\n    <div className=\"nfts\">\n      <div className=\"nfts-container\">\n        <div className=\"nfts-container_text\">\n          <h1> {title}</h1>\n        </div>\n        <div className=\"nfts-container_cards\">\n          {!loading ? (\n            nfts.map((nft) => (\n              <Link to={`/nft/${nft.id}`}>\n                <div className=\"nft-card\">\n                  <img src={nft.image} alt={nft.name} />\n                </div>\n              </Link>\n            ))\n          ) : (\n            <GridLoader size={20} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Nfts;\n","import { useContract } from \"./useContract\";\nimport SuperToken from \"../contracts/SuperTokens.json\";\nimport address from \"../contracts/SuperTokens-address.json\";\n\nexport const useSuperContract = () => {\n  return useContract(SuperToken.abi, address.SuperTokens);\n};\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n","import React, { useEffect, useState } from \"react\";\nimport Nfts from \"../../components/nfts/Nfts\";\nimport { useSuperContract } from \"../../hooks/useSuperContract\";\n\nconst Home = () => {\n  const [characters, setCharacters] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const superContract = useSuperContract();\n  useEffect(() => {\n    if (superContract) {\n      getCharacters();\n    }\n  }, [superContract]);\n\n  // get character metadata using its URI\n  const getMetadata = async (ipfsUrl) => {\n    try {\n      if (!ipfsUrl) return null;\n      const raw_data = await fetch(ipfsUrl);\n      const meta = await raw_data.json();\n      return meta;\n    } catch (e) {\n      console.log({ e });\n    }\n  };\n\n  // get all characters minted from contract\n  const getCharacters = async () => {\n    setLoading(true);\n    try {\n      const _characters = [];\n      const total = await superContract.methods.totalSupply().call();\n      for (let i = 0; i < Number(total); i++) {\n        const _character = new Promise(async (resolve) => {\n          const c = await superContract.methods.getToken(i).call();\n          const tokenData = await getMetadata(c._tokenURI);\n          resolve({\n            id: i,\n            owner: c.owner,\n            likesCount: c.likesCount,\n            happyCount: c.happyCount,\n            angryCount: c.angryCount,\n            name: tokenData.name,\n            image: tokenData.image,\n            description: tokenData.description,\n          });\n        });\n        _characters.push(_character);\n      }\n      const _chars = await Promise.all(_characters);\n      setCharacters(_chars);\n    } catch (e) {\n      console.log({ e });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"profile\">\n      <Nfts\n        nfts={characters}\n        loading={loading}\n        title=\"All Super hero characters\"\n      />\n    </div>\n  );\n};\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/like_emoji.699dd64f.png\";","export default __webpack_public_path__ + \"static/media/happy_emoji.d0733d62.webp\";","export default __webpack_public_path__ + \"static/media/angry_emoji.e7990ec3.jpg\";","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { useSuperContract } from \"../../hooks/useSuperContract\";\nimport \"./Token.css\";\nimport { truncateAddress } from \"../../utils/helperFunctions\";\nimport likeIcon from \"../../assets/like_emoji.png\";\nimport happyIcon from \"../../assets/happy_emoji.webp\";\nimport angryIcon from \"../../assets/angry_emoji.jpg\";\nimport { GridLoader } from \"react-spinners\";\n\nconst Token = () => {\n  const [character, setCharacter] = useState({});\n  const [content, setContent] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const { id } = useParams();\n  const superContract = useSuperContract();\n  const { performActions } = useContractKit();\n\n  useEffect(() => {\n    if (superContract) getCharacter();\n  }, [superContract]);\n\n  const getCharacter = async () => {\n    setLoading(true);\n    try {\n      const _c = await superContract.methods.getToken(id).call();\n      const _comments = await superContract.methods.getComment(id).call();\n      const token_data = await fetch(_c._tokenURI);\n      const token_meta = await token_data.json();\n\n      const charObj = {\n        name: token_meta.name,\n        image: token_meta.image,\n        description: token_meta.description,\n        owner: _c.owner,\n        likeCount: _c.likeCount,\n        happyCount: _c.happyCount,\n        angryCount: _c.angryCount,\n        comments: _comments,\n      };\n      setCharacter(charObj);\n      setLoading(false);\n    } catch (e) {\n      console.log({ e });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sendReaction = async (reactionId) => {\n    await performActions(async (kit) => {\n      const { defaultAccount } = kit;\n      try {\n        await superContract.methods\n          .addReaction(id, reactionId)\n          .send({ from: defaultAccount });\n        getCharacter();\n      } catch (e) {\n        console.log({ e });\n      }\n    });\n  };\n\n  const sendComment = async () => {\n    await performActions(async (kit) => {\n      const { defaultAccount } = kit;\n      try {\n        await superContract.methods\n          .addComment(id, content)\n          .send({ from: defaultAccount });\n        setContent(\"\");\n        getCharacter();\n      } catch (e) {\n        console.log({ e });\n      }\n    });\n  };\n\n  return (\n    <>\n      {!loading ? (\n        <div className=\"nft-info\">\n          <div className=\"nft-section\">\n            <div className=\"nft-img\">\n              <img src={character.image} />\n            </div>\n            <div className=\"nft-details\">\n              <div className=\"nft-d-owner\">\n                Minted by <span>{character.owner}</span>\n              </div>\n              <div className=\"nft-d-name\">{character.name}</div>\n              <div className=\"nft-d-description\">{character.description}</div>\n              <div className=\"reactions\">\n                <div className=\"r-div\">\n                  <div className=\"r-count\">{character.likeCount}</div>\n                  <img src={likeIcon} onClick={() => sendReaction(Number(1))} />\n                </div>\n                <div className=\"r-div\">\n                  <div className=\"r-count\">{character.happyCount}</div>\n                  <img\n                    src={happyIcon}\n                    onClick={() => sendReaction(Number(2))}\n                  />\n                </div>\n                <div className=\"r-div\">\n                  <div className=\"r-count\">{character.angryCount}</div>\n                  <img\n                    src={angryIcon}\n                    onClick={() => sendReaction(Number(3))}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"comments-section\">\n            <div className=\"add-c-text\">Add comment</div>\n            <div className=\"add-comment-section\">\n              <textarea\n                value={content}\n                onChange={(e) => setContent(e.target.value)}\n              />\n              <button onClick={() => sendComment()}>Add</button>\n            </div>\n            <hr />\n            <div className=\"prev-comments-section\">\n              {character.comments?.map((c) => (\n                <div className=\"comm\">\n                  <div className=\"comm-sender\">\n                    By <span>{truncateAddress(c.sender)}</span>\n                  </div>\n                  <div className=\"comm-content\">{c.content}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <GridLoader />\n      )}\n    </>\n  );\n};\n\nexport default Token;\n","import { useEffect, useState } from \"react\"\nimport { useSuperContract } from \"../../hooks/useSuperContract\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Web3Storage } from \"web3.storage/dist/bundle.esm.min.js\";\nimport \"./Mint.css\";\n\nconst Mint = () => {\n  const [name, setName] = useState(null);\n  const [description, setDescription] = useState(null);\n  const [image, setImage] = useState(null);\n  const superContract = useSuperContract();\n  const { address, connect, performActions } = useContractKit();  \n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!address) {\n      (async () => {\n        await connect();\n      })();\n    }\n  }, [address, connect]);\n\n  const isFormFiled = () => {\n    if (name === null || image === null || description === null) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const handleMintButton = async () => {\n    await mintNft();\n    navigate(\"/\");\n  };\n\n  const client = new Web3Storage({ token: process.env.REACT_APP_API_TOKEN });\n\n  const formattedName = (name) => {\n    let file_name;\n    const trim_name = name.trim();\n    if (trim_name.includes(\" \")) {\n      file_name = trim_name.replaceAll(\" \", \"%20\");\n      return file_name;\n    } else return trim_name;\n  };\n\n  const makeFileObjects = (file) => {\n    const blob = new Blob([JSON.stringify(file)], { type: \"application/json\" });\n    const files = [new File([blob], `${file.name}.json`)];\n    return files;\n  };\n\n  const uploadToIPFS = async (file) => {\n    if (!file) return;\n    try {\n      const file_name = file[0].name;\n      const image_name = formattedName(file_name);\n      const image_cid = await client.put(file);\n      const image_url = `https://${image_cid}.ipfs.w3s.link/${image_name}`;\n      return image_url;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  };\n\n  // mint an NFT\n  const mintNft = async () => {\n    await performActions(async (kit) => {\n      if (!name || !description || !image) return;\n      const { defaultAccount } = kit;\n\n      // trim any extra whitespaces from the name and\n      // replace the whitespace between the name with %20\n      const file_name = formattedName(name);\n      // convert NFT metadata to JSON format\n      const data = {\n        name,\n        image,\n        description,\n        owner: defaultAccount,\n      };\n\n      try {\n        // save NFT metadata to IPFS\n        const files = makeFileObjects(data);\n        const file_cid = await client.put(files);\n        const URI = `https://${file_cid}.ipfs.w3s.link/${file_name}.json`;        \n\n        // upload the NFT, mint the NFT and save the IPFS url to the blockchain\n        let transaction = await superContract.methods\n          .mintCharacter(URI)\n          .send({ from: defaultAccount });\n        return transaction;\n      } catch (error) {\n        console.log(\"Error minting character: \", error);\n      }\n    });\n  };\n\n  return (\n    <div className=\"create\">\n      <div className=\"create_head\">Create New NFT</div>\n      <div className=\"create_form\">\n        <div className=\"field_label\">Superhero name</div>\n        <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n        <div className=\"field_label\">Superhero description</div>\n        <textarea\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n        />\n        <div className=\"field_label\">Superhero headshot</div>\n        <input\n          type=\"file\"\n          onChange={async (e) => {\n            console.log(e.target.files);\n            const image_file = e.target.files;\n            console.log(image_file);\n            const imageUrl = await uploadToIPFS(image_file);\n            if (!imageUrl) {\n              alert(\"Failed to upload image\");\n              return;\n            }\n            setImage(imageUrl);\n          }}\n        />\n        <button disabled={!isFormFiled()} onClick={handleMintButton}>\n          Mint\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Mint;\n","import \"./App.css\";\nimport { Navbar } from \"./components\";\nimport { Home, Token, Mint } from \"./pages\";\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Router>\n        <Navbar />\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"nft/:id\" element={<Token />} />\n          <Route path=\"/create\" element={<Mint />} />\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"Super Tokens\",\n        description: \"Mint your favourite super hero on the blockchain\",\n        url: \"https://www.example.com\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}